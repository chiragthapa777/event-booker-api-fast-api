from copy import deepcopy
from http import HTTPStatus
import traceback
from fastapi import FastAPI
from starlette.exceptions import HTTPException as StarletteHTTPException
from fastapi.exceptions import RequestValidationError
from app.core.logger import get_logger
from app.core.response import error_response
from app.types.errors import AppError

def setup_exception_handler(app:FastAPI):
    app.add_exception_handler(Exception,custom_exception_handler) # This will not work if FastApi.debug = true
    app.add_exception_handler(StarletteHTTPException,http_exception_handler)
    app.add_exception_handler(RequestValidationError,validation_exception_handler)

async def http_exception_handler(request, exc: StarletteHTTPException):
    detail = exc.detail
    message=None
    metadata =None
    if isinstance(detail,str):
        message = detail
    else:
        message = detail["message"]
        metadata = deepcopy(detail)
        del metadata["message"]
    
    return error_response(message=message, code=exc.status_code, data=metadata)


async def validation_exception_handler(request, exc: RequestValidationError):
    metadata = getattr(exc, "errors", lambda: None)()
    return error_response(message="Validation Error", code=400, data=metadata)

async def custom_exception_handler(request, exc: Exception):
    http_code = HTTPStatus.INTERNAL_SERVER_ERROR
    message = "Something went wrong"

    # if error generated by our app
    if isinstance(exc, AppError):
        http_code = HTTPStatus.BAD_REQUEST
        message = str(exc)
    
    if http_code == HTTPStatus.INTERNAL_SERVER_ERROR:
        tb = traceback.format_exc()
        get_logger().error(msg=exc, extra={"type": exc.__class__.__name__, "traceback": tb})
        
    return error_response(message=message, code=http_code)